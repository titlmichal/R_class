print(out, short = FALSE)
psych::corr.test(df_cor)
psych::corr.test(df_cor,
adjust = "holm", # jakou korekci p-hodnot použít
method = "spearman", # typ korelačního koef
alpha = 0.01) %>% # hladina spolehlivosti bude 1 - alpha
print(short = FALSE)
str(out)
out$stars
print(out, short = FALSE)
#jinými slovy, když chceme více testů korelací
#hodí se fce corr.test z balíčku psych
# Korelogramy pomocí balíčku corrplot a stejnojmenné funkce corplot()
r_mat <- cor(df_cor, use = "pairwise")
r_mat # korelační matice
corrplot::corrplot(r_mat)    #defaultně udělá kruhové obrazce dle síly
corrplot::corrplot(r_mat,
method = "number", #definujeme formu zobrazení
order = "hclust")
corrplot::corrplot.mixed(r_mat,
lower = "number",
upper = "ellipse",
lower.col = "black",
order = "hclust") #zde seřazení dle podobnosti vztahů
# Network plots
#když bychom jich měli už moc
#stačí tady korelace vytvořené base R cor
df_cor <- df %>%
select(warm_m:neshody)
#chystám data
names(df_cor)
#(názvy proměnných)
r_mat <- cor(df_cor,
use = "pairwise",
method = "spearman")
#vytvářím korelační matici pomocí base r
diag(r_mat) <- 0
#nastavuju diagonálu v matici na nulu
#layout spring dává k sobě blízce korelující
#treshold specifikuje hladinu korelací, pod kterou nezobrazuje
#repulsion je pro layout --> určuje, jak moc jsou nody od sebe "odpuzovány"
qgraph(r_mat,
layout = "spring",
theme = "colorblind",
threshold = .2,
repulsion = .7,
groups = list(VŘE = 1:2,   #argument groups specifikuje barevné odlišení
DŮV = 4:5,   #a které proměnné tvoří ty skupiny
IND = 7:9,
NEG = 10:12,
CRO = 14:16,
CSK = 17:20,
VM = 26:28),
labels = c("VŘ.M", "VŘ.O", "MON", "DUV.R", "DUV.V", "VZsR", "IND.1", "IND.2",
"IND.3", "NEG.1", "NEG.2", "NEG.3", "ROD.E", "ROD.P", "ROD.A", "R.S",
"ŠK.E", "ŠK.P", "ŠK.A", "ŠK.S", "OPT", "ZSP", "EST", "EFF",
"PSS", "VM.U", "VM.S", "VM.N", "DEP", "NESH"),
#labels udává labely použité uprostřed bodů
GLratio = 9) #vzdálenost legendy, resp poměr grafu a legendy
#tady jsou sice použity klasické (bivariační) korelace
#ale často se používají parciální korelace (viz síťové modely v psychometrice)
#pak můžu korelovat
cor(df_cor)
#ale musím nastavit use
#protože už jedna missing value --> celé missing
#užití pairwise --> využijí se všechny dostupné případy
cor(df_cor,
use = "pairwise")
#a případně i zakrouhlení třeba
cor(df_cor,
use = "pairwise") %>%
round(digits = 2)
# GGally a funkce ggpairs()
#prvně specifikuje data a pak sloupce, co chci korelovat
#pod diagonálou grafy, nad koeficienty, na diag. je rozdělení
ggpairs(df,
columns = variables)
#na úpravu už ale potřebujeme vlastní fci
plot_scatter <- function(data, mapping){
ggplot(data = data, mapping = mapping) +
geom_jitter(alpha = .05) +
geom_smooth(color = "blue",
se = FALSE,
method = "lm",
linetype = "11") +
geom_smooth(color = "red",
fill = "red",
alpha = .2)
}
ggpairs(df,
columns = variables,
lower = list(continuous = plot_scatter))
# GGally a funkce ggpairs()
#prvně specifikuje data a pak sloupce, co chci korelovat
#pod diagonálou grafy, nad koeficienty, na diag. je rozdělení
ggpairs(df,
columns = variables)
### Import dat
df <- haven::read_sav("https://is.muni.cz/go/ol7a9l") %>%
select(gender:dcq_12)
# Balíčky
library(psych)
library(corrplot)
library(semTools)
library(dynamic)
library(pheatmap)
library(lavaan)    #ten hlavně, obecně se hodí na SEM (laten var analyses = lavaan)
library(tidyverse)
### Import dat
df <- haven::read_sav("https://is.muni.cz/go/ol7a9l") %>%
select(gender:dcq_12)
glimpse(df)
# Jména položek
items <- str_c("dcq_",
str_pad(1:12, pad = 0, width = 2))
# Znění položek
wording <- df %>%
select(all_of(items)) %>%
map_chr(~attributes(.)$label) %>%
unname()
wording
# Převrácení reverzních
reversed <- items[5:8]
glimpse(df)
##%######################################################%##
#                                                          #
####                        SEM                         ####
#                                                          #
##%######################################################%##
# Tutorial: http://lavaan.ugent.be/tutorial/
# Manual: http://users.ugent.be/~yrosseel/lavaan/lavaanIntroduction.pdf
# Lavaan cheat sheet: http://jeromyanglim.tumblr.com/post/33556941601/lavaan-cheat-sheet
# Preface -----------------------------------------------------------------
# Balíčky
library(psych)
library(corrplot)
library(semTools)
library(dynamic)
library(pheatmap)
library(lavaan)    #ten hlavně, obecně se hodí na SEM (laten var analyses = lavaan)
library(tidyverse)
#dnes to bude hlavně o CFA
### Import dat
df <- haven::read_sav("https://is.muni.cz/go/ol7a9l") %>%
select(gender:dcq_12)
#DCQ - data o vývojových krizích/životních tranzicích
#3 faktory
glimpse(df)
# Jména položek
items <- str_c("dcq_",
str_pad(1:12, pad = 0, width = 2))
# Znění položek
wording <- df %>%
select(all_of(items)) %>%
map_chr(~attributes(.)$label) %>%
unname()
wording
# Převrácení reverzních
reversed <- items[5:8]
df <- df %>%
mutate(
across(
all_of(reversed),
~6 - .x
)
)
# Položková analýza a odhad reliability
df %>%
select(all_of(items)) %>%
psych::alpha()
# Převod na dlouhý formát
long <- df %>%
pivot_longer(all_of(items),
names_to = "item",
values_to = "response")
long
# Sloupcové grafy s četmostmi odpovědí na jednotlivé položky
response_counts <- long %>%
drop_na(response) %>%
count(item, response) %>%
mutate(p = n / sum(n),
response = as_factor(response),
.by = item)
# Sloupcové grafy s četmostmi odpovědí na jednotlivé položky
response_counts <- long %>%
drop_na(response) %>%
count(item, response) %>%
mutate(p = n / sum(n),
response = as_factor(response),
.by = item)
# Obyčejné sloupcové grafy
response_counts %>%
ggplot(aes(x = response,
y = p)) +
geom_col() +
facet_wrap(~item)
df
long
# Skládané sloupcové grafy
response_counts %>%
ggplot(aes(x = p,
y = item,
fill = fct_rev(response))) +
geom_col() +
scale_fill_brewer(palette = "RdYlGn",
direction = -1)
# Libovolné deskriptivní statistiky s pomocí summarise
long %>%
drop_na(response) %>%
group_by(item) %>%
summarise(
m = mean(response),
sd = sd(response),
p = (m - 1) / 4,
skew = psych::skew(response)
)
# Korelace mezi položkami
rmat <- df %>%
select(all_of(items)) %>%
cor()
round(rmat, digits = 2)
corrplot::corrplot.mixed(rmat,
lower.col = "black",
order = 'hclust')
# SMC: Squared multiple correlations
# Rozptyl vysvětlený všemi ostatními položkami
# Položky s nízkými hodnotami SMC moc společného rozptylu s ostatními položkami
# Nesdílejí
r2 <- df %>%
select(all_of(items)) %>%
psych::smc()
# SMC: Squared multiple correlations
# koeficient vicenasobné korelace
# položka predikována všemi ostatními položkami to je jakoby
# Rozptyl vysvětlený všemi ostatními položkami
# Položky s nízkými hodnotami SMC moc společného rozptylu s ostatními položkami
# Nesdílejí
r2 <- df %>%
select(all_of(items)) %>%
psych::smc()
tibble(
item = items,
smc = r2
) %>%
ggplot(aes(x = fct_reorder(item, smc,
.desc = TRUE),
y = smc)) +
geom_point(size = 3) +
geom_line(mapping = aes(group = 1)) +
expand_limits(y = 0)
# Scree-plot aka sutinový graf vlastních čísel
df %>%
select(all_of(items)) %>%
psych::scree()
# Paralelní analýza
df %>%
select(all_of(items)) %>%
psych::fa.parallel(quant = .50,
n.iter = 100,
sim = FALSE)
# Normalita jen zřídka naplněna, multivariační zvlášť.
df %>%
select(all_of(items)) %>%
psych::mardia() # Mardia's test
# Henze-Zirkler test a Robustní Mahalanobisovy vzdálenostii
df %>%
select(all_of(items)) %>%
MVN::mvn(multivariateOutlierMethod = "quan",
showOutliers = TRUE)
# Pro odhad CFA
my_cfa <- function(data, model, ...) {
lavaan::cfa(data = data,
model = model,
estimator = "ml",
missing = "listwise",
...)
}
# Pro output modelu
output <- function(fit) {
summary(fit, std = TRUE, ci = TRUE, fit = TRUE)
}
# Pro indexy shody s daty
fit_measures <- function(fit) {
out <- fitMeasures(
fit,
fit.measures = c("chisq", "chisq.scaled", "df", "cfi", "cfi.robust",
"rmsea", "rmsea.ci.lower", "rmsea.ci.upper",
"rmsea.robust", "rmsea.ci.lower.robust",
"rmsea.ci.upper.robust",
"srmr")) %>%
as.list()
out$AIC <- AIC(fit)
out$BIC <- BIC(fit)
out
}
# Jak si ulehčit psaní názvů položek
items %>%
str_c(collapse = " + ") %>%
writeLines()
# Model 1 - jednoduchý, jednodimenzionální
#nalevo napíšeme název proměnné, která by se neměla vyskytovat v datech
#zde DCQ
# =~ značí že je měřena
# za =~ říkáme čím je měřena
m_1 <- "
DCQ =~ dcq_01 + dcq_02 + dcq_03 + dcq_04 + dcq_05 + dcq_06 + dcq_07 +
dcq_08 + dcq_09 + dcq_10 + dcq_11 + dcq_12
"
fit_1 <- my_cfa(df, m_1)
output(fit_1)
# Model 2 - jednoduchý, třífaktorový model
m_2 <- "
# Disconnection & Distress
DD =~ dcq_01 + dcq_02 + dcq_03 + dcq_04
# Lack of Clarity & Control
LCC =~  dcq_05 + dcq_06 + dcq_07 + dcq_08
# Transition & Turning Point
TTP =~ dcq_09 + dcq_10 + dcq_11 + dcq_12
"
fit_2 <- my_cfa(df, m_2)
output(fit_2)
# Model 3 - třífaktorový model s komplikacemi
m_3 <- "
# Disconnection & Distress
DD =~ dcq_01 + dcq_02 + dcq_03 + dcq_04
# Lack of Clarity & Control
LCC =~ dcq_05 + dcq_06 + dcq_07 + dcq_08
# Transition & Turning Point
TTP =~ dcq_09 + dcq_10 + dcq_11 + dcq_12
#reziduální korelace položek 9 a 10
dcq_09 ~~ dcq_10
"
fit_3 <- my_cfa(df, m_3)
output(fit_3)
fit_3 <- my_cfa(df, m_3)
output(fit_3)
# S–1 bifactor model - 1 OBECNÝ faktor a série ortogonálních faktorů
m_4 <- "
G =~ dcq_01 + dcq_02 + dcq_03 + dcq_04 + dcq_05 + dcq_06 + dcq_07 +
dcq_08 + dcq_09 + dcq_10 + dcq_11 + dcq_12
# Disconnection & Distress
### Rererence factor DD =~ dcq_01 + dcq_02 + dcq_03 + dcq_04
# Lack of Clarity & Control
LCC =~ dcq_05 + dcq_06 + dcq_07 + dcq_08
# Transition & Turning Point
TTP =~ dcq_09 + dcq_10 + dcq_11 + dcq_12
dcq_09 ~~ dcq_10
# Orthogonality constraints
G ~~ 0*LCC + 0*TTP
LCC ~~ 0*TTP
"
fit_4 <- my_cfa(df, m_4)
output(fit_4)
# Můžeme si vytvořit list se všemi modely
m_list <- list(
one = m_1,
three = m_2,
three_tuned = m_3,
bifac = m_4
)
# Odhad všech modelů pomocí fce map(), která bere každý prvek listu
# a uplatní na něj, co je specifikováno
fits <- m_list %>%
map(~cfa(data = df,
model = .x,
estimator = "ml",
std.lv = TRUE,
missing = "listwise"))
# Přehled fit ibdexů
fit_indices <- fits %>%
map_df(fit_measures, .id = "model")
fit_indices
# Rozdílový chi2 test
#exaktní test 2 a víc modelu
lavTestLRT(fits$one, fits$three)
lavTestLRT(fits$three, fits$three_tuned)
# Finální model, který chceme použít
final <- fits$three_tuned
# Stručný souhrn výsledků.
output(final)
#Přehled odhadnutých parametrů - nepřehledný, technický.
parameterEstimates(final, level = .99)
standardizedSolution(final, level = .99) # standardizované řešení
summary(final, std = TRUE, ci = TRUE, fit = TRUE) #defaultně jsou FALSE
#Přehled odhadnutých parametrů - nepřehledný, technický.
parameterEstimates(final, level = .99)
standardizedSolution(final, level = .99) # standardizované řešení
#Všechny indikátory shody počítané lavaanem.
fitmeasures(final)
# Jen vybrané, které jsme si definovali ve custom funkci
fit_measures(final)
# Shrnutí fitů
fit_indices
# dynamic cut-offs for fit indexy
#nověji se upouští od pevných cutoffů --> dynamické se používají
dynamic::cfaHB(final, plot = TRUE, reps = 500)
# Modelem implikovaná variačně-kovarianční matice a vektor průměrů.
fitted(final)
# Vstupní kovarianční matice
inspect(final, 'sampstat')
# Vstupní kovarianční matice
inspect(final, 'sampstat')
# Koeficienty modelu
inspect(final, what = "est")  # vše
inspect(final, what = "est")$lambda  # faktorové náboje
inspect(final, what = "est")$theta   # residuální variance/kovariance pozorovaných proměnných
inspect(final, what = "est")$psi     # kovariance/korelace faktorů
modificationindices(fits$three, sort. = TRUE)
# Modifikační indexy a reziduální kovariance/korelace -----------------------
#odhad jak by se mohla shoda modelu s daty zlepšit (chi-kvadrát)
modificationindices(fits$three, sort. = TRUE)
# Reziduální matice.
lavResiduals(fits$three, type = "raw") # variance/kovariance
lavResiduals(fits$three, type = "cor") # korelace a z-test
# Můžeme se podívat na to, které pozorované vztahy model špatně reprodukuje
# Nejlépe graficky
lavResiduals(fits$three, type = "cor")$cov %>%
corrplot::corrplot.mixed(upper = "circle",
lower = 'number',
lower.col = "black")
# Graf standardizovaných reziduí
lavResiduals(fits$three_tuned, type = "cor.bentler")$cov.z %>%
pheatmap::pheatmap(display_numbers = T)
lavResiduals(fits$three_tuned, type = "cor.bentler")$cov %>%
pheatmap::pheatmap(display_numbers = T)
semTools::compRelSEM(final, return.total = TRUE) # Omega
semTools::compRelSEM(final, return.total = TRUE, tau.eq = TRUE) # Alpha
# Graf standardizovaných reziduí
lavResiduals(fits$three_tuned, type = "cor.bentler")$cov.z %>%
pheatmap::pheatmap(display_numbers = T)
semTools::compRelSEM(final, return.total = TRUE) # Omega
semTools::compRelSEM(final, return.total = TRUE, tau.eq = TRUE) # Alpha
library(tidySEM)
lay <- c(
"", "DD", "", "", "", "", "LCC", "", "", "", "", "TTP", "",
"", "", "", "", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", "", "", "", "",
"dcq_01", "dcq_02", "dcq_03", "dcq_04", "dcq_05", "dcq_06", "dcq_07", "dcq_08", "dcq_09", "", "dcq_10", "dcq_11", "dcq_12"
) %>%
matrix(nrow = 4,
byrow = TRUE)
lay <- c(
"", "DD", "", "", "", "", "LCC", "", "", "", "", "TTP", "",
"", "", "", "", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", "", "", "", "",
"dcq_01", "dcq_02", "dcq_03", "dcq_04", "dcq_05", "dcq_06", "dcq_07", "dcq_08", "dcq_09", "", "dcq_10", "dcq_11", "dcq_12"
) %>%
matrix(nrow = 4,
byrow = TRUE)
lay
gdata <- prepare_graph(final,
layout = lay,
ellipses_width = 2,
ellipses_height = 2,
rect_width = 1.5,
rect_height = 0.8)
plot(gdata)
# Nezobrazovat rozptyl latentních proměnných, který je stejně fixován na 1
edges(gdata) <- edges(gdata) %>%
filter(label != "1.00")
plot(gdata)
# Šipky vyjadřující reziduální rozptyl vždy ukazovat dole
edges(gdata) <- edges(gdata) %>%
mutate(
connect_from = if_else(from == to, "bottom", connect_from),
connect_to = if_else(from == to, "bottom", connect_to)
)
plot(gdata)
# Šipky pro faktorové náboje připojovat shora
edges(gdata) <- edges(gdata) %>%
mutate(
connect_to = if_else(arrow == "last", "top", connect_to)
)
plot(gdata)
# Doplnit do labelů i interval spolehlivosti a smazat leading zero i hvězdičky
edges(gdata) <- edges(gdata) %>%
mutate(
label = str_c(est_std, "\n",  confint_std) %>%
str_replace_all(pattern = fixed("0."), replacement = ".")
)
plot(gdata)
# Labely položek velkými písmeny
nodes(gdata) <- nodes(gdata) %>%
mutate(label = str_replace(label,
pattern = "dcq_",
replacement = "DCQ"))
plot(gdata)
# Změnit pozice labelů pro edges
gdata <- gdata %>%
edit_graph({label_location = c(
.8, .5, .8, .5,
.8, .5, .8, .5,
.8, .5, .8, .5,
rep(0.5, 16)
)}, element = "edges"
)
plot(gdata)
plot(gdata)
#...od té matice to byly všechny změny potřebné k publikaci
#...od té matice to byly všechny změny potřebné k publikaci
#...od té matice to byly všechny změny potřebné k publikaci
#...od té matice to byly všechny změny potřebné k publikaci
nodes(gdata)
#...od té matice to byly všechny změny potřebné k publikaci
nodes(gdata)
edges(gdata)
#uložení grafu (protože to používá podobné věci jako ggpplot)
ggsave()
#uložení grafu (protože to používá podobné věci jako ggpplot)
ggsave("test.jpg")
#uložení grafu (protože to používá podobné věci jako ggpplot)
ggsave("first_SEM_graph.jpg")
