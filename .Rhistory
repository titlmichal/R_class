# - letěly do Houstonu (destinace IAH nebo HOU)
flights %>%
filter(dest = "IAH" | dest = "HOU")
# - letěly do Houstonu (destinace IAH nebo HOU)
flights %>%
filter(dest = 'IAH' | dest = 'HOU')
# - letěly do Houstonu (destinace IAH nebo HOU)
flights %>%
filter(dest = 'IAH' | dest = 'HOU')
# - letěly do Houstonu (destinace IAH nebo HOU)
flights %>%
filter(dest %in% c("IAH", "HOU"))
# - letěly v letních měsících (červenec až září)
flights %>%
filter(month between(7,9))
# - letěly v letních měsících (červenec až září)
flights %>%
filter(month %between% (7,9))
# - letěly v letních měsících (červenec až září)
flights %>%
filter(month %between% c(7,9))
# - letěly v letních měsících (červenec až září)
flights %>%
filter(between(month, 7, 9))
# - dorazily se zpožděním větším než dvě hodiny, i když odletěly bez zpoždění
flights %>%
filter(dep_delay == 0 , arr_delay > 120)
help(arrange)
# Seřaďte dataset flights podle zpoždění při odletu (sestupně) a zároveň
# podle zpoždění při příletu (vzestupně)
flights %>%
arrange(desc(dep_delay), arr_delay)
# Seřaďte dataset flights podle zpoždění při odletu (sestupně) a zároveň
# podle zpoždění při příletu (vzestupně)
flights %>%
arrange(desc(dep_delay), asc(arr_delay))
# Seřaďte dataset flights podle zpoždění při odletu (sestupně) a zároveň
# podle zpoždění při příletu (vzestupně)
flights %>%
arrange(desc(dep_delay), arr_delay)
help(distinct)
# Pomocí funkce distinct() zjistěte, zda každý den v roce
# proběhl aspoň jeden let
flights %>%
distinct(month, day)
# Pomocí funkce distinct() zjistěte, zda každý den v roce
# proběhl aspoň jeden let
flights %>%
count(distinct(month, day))
# Pomocí funkce distinct() zjistěte, zda každý den v roce
# proběhl aspoň jeden let
flights %>%
distinct(month, day)
help(mutate)
help(.before)
help(before)
# Pomocí funkce mutate() doplňte do datasetu novou proměnnou speed,
# která bude udávat rychlost letadla v kilometrech za hodinu.
# Udělejte to tak, aby nově vytvořená proměnná byla zařazena na začátek datasetu
# a aby se změny uložily.
flights %>%
mutate(speed = 1, before )
# Pomocí funkce mutate() doplňte do datasetu novou proměnnou speed,
# která bude udávat rychlost letadla v kilometrech za hodinu.
# Udělejte to tak, aby nově vytvořená proměnná byla zařazena na začátek datasetu
# a aby se změny uložily.
flights %>%
mutate(speed = 1, .before = 1)
glimps(flights)
glimpse(flights)
# Pomocí funkce mutate() doplňte do datasetu novou proměnnou speed,
# která bude udávat rychlost letadla v kilometrech za hodinu.
# Udělejte to tak, aby nově vytvořená proměnná byla zařazena na začátek datasetu
# a aby se změny uložily.
flights %>%
mutate(speed = distance/(hour + (minute/60)), .before = 1)
# Pomocí funkce mutate() doplňte do datasetu novou proměnnou speed,
# která bude udávat rychlost letadla v kilometrech za hodinu.
# Udělejte to tak, aby nově vytvořená proměnná byla zařazena na začátek datasetu
# a aby se změny uložily.
flights %>%
mutate(speed = (distance/(hour + (minute/60))) * 1.609, .before = 1)
glimpse(flights)
glimpse(flights)
flights <- flights %>%
mutate(speed = (distance/(hour + (minute/60))) * 1.609, .before = 1)
glimpse(flights)
help(rename)
flights %>%
rename(speed_km_h = speed)
glimpse(flights)
flights <- flights %>%
rename(speed_km_h = speed)
glimpse(flights)
# Pomocí funkce relocate() přesuňte proměnnou speed_km_h za sloupce day
help(relocate)
flights %>%
relocate(speed_km_h, .afer = dav)
flights %>%
relocate(speed_km_h, .afer = day)
flights %>%
relocate(speed_km_h, .afer = 2)
flights %>%
relocate(speed_km_h, .afer = 1)
flights %>%
relocate(speed_km_h, .afer = "day")
glimpse(flights)
flights %>%
relocate(speed_km_h, .afer = "day")
flights %>%
relocate(speed_km_h)
flights %>%
relocate(speed_km_h, .after = day)
glimpse(flights)
# Pomocí funkce relocate() přesuňte proměnnou speed_km_h za sloupce day
flights <- flights %>%
relocate(speed_km_h, .after = day)
glimpse(flights)
help(select)
# Pomocí funkce select() z datasetu vyberte čtyři proměnné:
# dep_time, dep_delay, arr_time a arr_delay
# Zkuste vymyslet více než jeden způsob, jak toho dosáhnout.
flights %>%
select(dep_time, dep_delay)
# Pomocí funkce select() z datasetu vyberte čtyři proměnné:
# dep_time, dep_delay, arr_time a arr_delay
# Zkuste vymyslet více než jeden způsob, jak toho dosáhnout.
flights %>%
select(dep_time, dep_delay, arr_time, arr_delay)
help(where)
flights %>%
select(5, 7, 8, 10)
# Pomocí funkce select() z datasetu vyberte čtyři proměnné:
# dep_time, dep_delay, arr_time a arr_delay
# Zkuste vymyslet více než jeden způsob, jak toho dosáhnout.
flights %>%
select(dep_time, dep_delay, arr_time, arr_delay)
flights %>%
select(5, 7, 8, 10)
help(where)
help("starts_with")
flights %>%
select(where(starts_with("dep")))
flights %>%
select(starts_with("dep"))
flights %>%
select(starts_with("dep") %or% starts_with("arr"))
flights %>%
select(starts_with("dep") | starts_with("arr"))
flights %>%
select(5, 7, 8, 10)
# Pomocí funkce select() z datasetu vyberte čtyři proměnné:
# dep_time, dep_delay, arr_time a arr_delay
# Zkuste vymyslet více než jeden způsob, jak toho dosáhnout.
flights %>%
select(dep_time, dep_delay, arr_time, arr_delay)
library(tidyverse)
library(nycflights13)
arrange() #
# * Použití pipe operátoru -----------------------------------
#ctrl + shift + m = %>%
# Přehledné zřetězení více operací dohromady
flights |>
filter(dest == "IAH") |>
mutate(speed = distance / air_time * 60) |>
select(year:day, dep_time, carrier, flight, speed) |>
arrange(desc(speed))
# Nebo bychom museli vytvářet mnoho nových objektů
flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)
arrange(flights3, desc(speed))
# Funkce group_by() rozdělí dataset do skupin pro další analýzu
# Všimněte si výstupu groups
flights |>
group_by(month)
flights |>
group_by(month) |>
summarise(
avg_delay = mean(dep_delay)
)
# Arugmentem na.rm je budeme ignorovat
# tedy remove na = TRUE
flights |>
group_by(month) |>
summarise(
avg_delay = mean(dep_delay, na.rm = TRUE)
)
# Arugmentem na.rm je budeme ignorovat
# tedy remove na = TRUE
flights %>%
group_by(month) |>
summarise(
avg_delay = mean(dep_delay, na.rm = TRUE)
)
# Funkce n() podá informace o počtu řádků
flights |>
group_by(month) |>
summarise(
avg_delay = mean(dep_delay, na.rm = TRUE),
n = n()
)
(month)
# Funkce slice_
grouped <- flights %>%
group_by(month)
# slice_head() Vybere první řádek/řádky z každé skupiny
grouped %>%
slice_head(n = 1)
# slice_head() Vybere PRVNÍ řádek/řádky z každé skupiny
grouped %>%
slice_head(n = 1)
# slice_tail() Vybere POSLEDNÍ řádek/řádky z každé skupiny
grouped %>%
slice_tail(n = 1)
# slice_min() vybere řádek/řádky s nejmenšími hodnotami zvoleného sloupce
grouped %>%
slice_min(dep_delay, n = 1)
# slice_max() Vybere řádek/řádky s největšími hodnotami zvoleného sloupce
grouped %>%
slice_max(arr_delay, n = 1)
# slice_max() Vybere řádek/řádky s největšími hodnotami zvoleného sloupce
grouped %>%
slice_max(arr_delay, n = 1)
# slice_sample() vybere náhodné řádky
grouped %>%
slice_sample(n = 1)
# slice_sample() vybere náhodné řádky
grouped %>%
slice_sample(n = 1)
# Do funkce group_by můžeme dát více proměnných
daily <- flights |>
group_by(year, month, day)
# slice_sample() vybere náhodné řádky
grouped %>%
slice_sample(n = 1)
# slice_sample() vybere náhodné řádky
grouped %>%
slice_sample(n = 1)
# Do funkce group_by můžeme dát více proměnných
daily <- flights |>
group_by(year, month, day)
daily
daily %>%
summarise(
avg_daily_delay = mean(dep_delay, na.rm = TRUE)
)
count(daily)
summarise(daily, n=n())
summarise(daily, n=n())
daily %>%
summarise(
avg_daily_delay = mean(dep_delay, na.rm = TRUE)
)
daily
summarise(daily, n=n())
# Všimněte si, že funkce summarise() defaultně "odloupne" dělení podle
# poslední proměnné (ve výsledném datasetu)
# Toto chování lze změnit pomocí argumentu .groups
?summarise
# Zrušit rozdělení do skupin jde pomocí funkce ungroup
daily %>%
ungroup() %>%
summarise(
avg_total_delay = mean(dep_delay, na.rm = TRUE)
)
# Nověji jde pracovat i bez funkce group_by() a specifikovat rozdělení
# datasetu do skupin až v samotné funkci summarise()
# pomocí argumentu .by
flights |>
summarise(
delay = mean(dep_delay, na.rm = TRUE),
n = n(),
.by = c(origin, dest)
)
library(tidyverse)
library(nycflights13)
students <- read_csv("https://pos.it/r4ds-students-csv")
# Dataset se nám importoval, ale nevypadá úplně OK
students
# * SPSS -----------------------------------------------------------------
# Balíček haven
library(haven)
# * Excel --------------------------------------------------------------
# Spíše případová studie
library(readxl)
library(janitor)
# * SPSS -----------------------------------------------------------------
# Balíček haven
library(haven)
# * Excel --------------------------------------------------------------
# Spíše případová studie
library(readxl)
library(janitor)
library(janitor)
install.packages('janitor')
library(janitor)
library(janitor)
students <- read_csv("https://pos.it/r4ds-students-csv")
# Dataset se nám importoval, ale nevypadá úplně OK
students
#tohle je html adresa na github
students1 <- read_csv("data/students.csv")
# Dataset se nám importoval, ale nevypadá úplně OK
students
students1
# Nejdříve můžeme redefinovat chybějící hodnoty
students <- read_csv("https://pos.it/r4ds-students-csv",
na = c("", "N/A"))
students
# Můžeme také změnit názvy sloupců, ať jsou konzistentní a lépe se na ně
# odkazuje
students |>
rename(
student_id = `Student ID`,
full_name = `Full Name`
)
students <- read_csv("https://pos.it/r4ds-students-csv")
students   #teď už svítí i původní N/A
students
students <- students %>%
mutate(age = if_else(age == "five", true = "5", false = age) %>%
as.integer())
students <- students %>%
mutate(age = if_else(age == "five", true = "5", false = age) %>%
as.integer())
# Dále můžeme opravit sloupec age
#funkce if_else...dost podobné jak v excelu
#pokud je age "five", pak vráti "5", jinak klasický age
#a změní se tím sloupce
students %>%
mutate(age = if_else(age == "five", true = "5", false = age))
students
# Automatizovaně s využitím balíčku janitor a funkce clean_names()
#janitor použiuje snakeCase
#ty :: jsou pro odkázání se na knihovnu/balíček, ale není to nutné
students <- students |>
janitor::clean_names()
students
students <- students %>%
mutate(age = if_else(age == "five", true = "5", false = age) %>%
as.integer())
students
# Nakonec můžeme meal_plan změnit na kategorickou proměnnou
summary(students)
summary(students)
students <- students %>%
mutate(
meal_plan = factor(meal_plan)
)
summary(students)
ghi
# Mohli bychom například mít tento .csv soubor
example <- "
logical,numeric,date,string
TRUE,1,2021-01-15,abc
false,4.5,2021-02-15,def
T,Inf,2021-02-16,ghi
"
# Načteno ok
read_csv(example)
# Někdy je nutné ručně definovat chybějící hodnoty
simple_csv <- "
x
10
.
20
30"
# Načteno ok
read_csv(example)
read_csv(simple_csv)
read_csv(simple_csv, na = ".")
read_csv(simple_csv, na = ".")
# Nebo ručně specifikovat, jaký typ proměnné chceme, pomocí argumentu col_types
df <- read_csv(
simple_csv,
col_types = list(x = col_double())
)
# A pak se pomocí funkce problems() podívat, jestli při importu nastal problém
problems(df)
df
#na řádku 3 sloupce 1 čekal číslo, ale byla tam tečka
df
read_csv(simple_csv, na = ".")
read_csv(simple_csv)
#na řádku 3 sloupce 1 čekal číslo, ale byla tam tečka
df
# Další cvičný csv soubor
another_csv <- "
x,y,z
1,2,3
4,5,6"
another_csv
# Taky můžeme změnit defaultní typ sloupců, např. kdybychom pro jistotu
# chtěli nejprve vše nejprve importovat jako text
read_csv(
another_csv,
col_types = cols(.default = col_character())
)
read_csv(another_csv)
# Taky můžeme změnit defaultní typ sloupců, např. kdybychom pro jistotu
# chtěli nejprve vše nejprve importovat jako text
read_csv(
another_csv,
col_types = cols(.default = col_character())
)
# Anebo můžeme ručně definovat, že se mají importovat pouze určité sloupce
# Takto bychom specifikovali, že se sloupec x má importovat jako textový
# (ostatní sloupce automaticky)
read_csv(
another_csv,
col_types = list(x = col_character(),
y = col_integer())
)
# Takto bychom specifikovali, že se sloupec x má importovat jako textový
# a že jiné se importovat nemají
read_csv(
another_csv,
col_types = cols_only(x = col_character())
)
# * SPSS -----------------------------------------------------------------
# Balíček haven
library(haven)
# Načtení dat z SPSS obvykle není problematické
international <- read_spss("data/international.sav")
# Načtení dat z SPSS obvykle není problematické
international <- read_spss("data/international.sav")
#zase stačí (relativní cesta)
international
#zase stačí (relativní cesta)
international
# Ale balíček haven proto má pomocnou funkci as_factor
?as_factor
#btw na zjištění, kde zrovna jsem
getwd()
# Ale balíček haven proto má pomocnou funkci as_factor
?as_factor
international %>%
mutate(
contint = as_factor(contint)
)
# * Excel --------------------------------------------------------------
# Spíše případová studie
library(readxl)
library(janitor)
df <- read_excel("data/four_countries_data.xlsx")
# Takhle bychom to nechtěli
df
# Takhle bychom to nechtěli
df
# Nejprve opravíme názvy proměnných a někam si je uložíme
var_names <- read_excel("data/four_countries_data.xlsx",
n_max = 0) %>%
clean_names() %>%
colnames()
var_names
# Takhle bychom to nechtěli
df
var_names
# Na druhém řádku jsou popisnější labely proměnných, ty si také uložíme
var_labels <- read_excel("data/four_countries_data.xlsx",
skip = 1,
n_max = 0) %>%
colnames()
colnames()
colnames()
var_labels
metadata <- tibble(
names = var_names,
labels = var_labels
)
metadata
# Pak konečně importujeme dataset bez tří prvních řádků
df <- read_excel("data/four_countries_data.xlsx",
skip = 3,
col_names = FALSE)
df
# Pomocí set_names() přepíšeme názvy sloupců
df <- df %>%
set_names(var_names)
df
# Dále můžeme odstranit některé nepotřebné sloupce
# např. progress
# s využitím funkcí balíčku janitor
# použiju fci remove_constant, která odstraní sloupce s konstantami
# a remove_empty, která zahodí ty sloupce, které nemají žádnou hodnotu
df <- df %>%
remove_constant() %>%
remove_empty(which = "cols")
df
# Někdy se z Excelu importuje chybně datum jako numerická proměnná
# (počet dní od data 1899-12-30)
# I pro to má janitor užitečnou funkci
# fce excel_numeric_to_date
df <- df %>%
mutate(start_date = excel_numeric_to_date(start_date),
end_date = excel_numeric_to_date(end_date),
recorded_date = excel_numeric_to_date(recorded_date))
df
#fci save pak můžu použít na uložení
save(df, students, grouped, international,
file = "data/my_data.Rdata")
load("data/my_data.Rdata")
#...tak si ty data můžu tady zase zpátky načíst
#btw pokud bych nechtěl používat původní název, tak můžu použít write_rds
write_rds(df,
file = "data/df.rds")
random_nazev <- read_rds("data/df.rds")
random_nazev
#...a pak to můžu klidně hodit jako csv zase
write_csv(df,
file = "data/df.csv")
