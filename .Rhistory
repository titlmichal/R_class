shape = "Druh")
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(mapping = aes(color = species,
shape = species),
size = 2.5) +
geom_smooth(method = "lm") +
scale_color_colorblind() +
labs(title = "Hmotnost a délka ploutví tučňáků",
x = "Délka ploutví v mm",
y = "Hmotnost v g",
)
color = "Druh",
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(mapping = aes(color = species,
shape = species),
size = 2.5) +
geom_smooth(method = "lm") +
scale_color_colorblind() +
labs(title = "Hmotnost a délka ploutví tučňáků",
x = "Délka ploutví v mm",
y = "Hmotnost v g",
color = "Druh",
shape = "Druh")
?geom_point
#btw název balíčku, odkud je fce, je vedle názvu v {}
?ggplot
?aes
#   ____________________________________________________________________________
#   Základy vizualizace dat                                                 ####
library(tidyverse)
library(palmerpenguins)
library(nycflights13)
# Zatím jsme se odkazovali na hlavní argumenty funkce ggplot() explicitně
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
# Abychom si ušetřili psaní, jde to i implicitně, protože když neuvedeme
# názvy argumentů, bude funkce očekávat na první pozici data a na druhé
# pozici mapování proměnných
ggplot(
penguins,
aes(x = flipper_length_mm,
y = body_mass_g)
) +
geom_point()
# Můžeme se už začít seznamovat s operátorem pipe %>%
penguins %>%
ggplot(aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point()
# Když chceme znázornit rozdělení jedné kategorické proměnné, obvykle použijeme
# sloupcový graf
ggplot(penguins, aes(x = species)) +
geom_bar()
# Často chceme kategorie seřadit podle zastoupení, toho můžeme docílit pomocí
# funkce fct_infreq()
?fct_inorder
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
# Ke znázornění distribuce numerické proměnné často používáme histogramy
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram()
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
# Ke znázornění distribuce numerické proměnné často používáme histogramy
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram()
# Šířku intervalů můžeme specifikovat argumentem binwidth a vybrat nějakou
# rozumnou hodnotu
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 2000)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 20)
# Šířku intervalů můžeme specifikovat argumentem binwidth a vybrat nějakou
# rozumnou hodnotu
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
# Anebo můžeme specifikovat počet sloupců argumentem bins
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 30)
# Anebo můžeme specifikovat počet sloupců argumentem bins
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 30)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 300)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 10)
# Anebo můžeme specifikovat počet sloupců argumentem bins
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 30)
# Anebo můžeme specifikovat počet sloupců argumentem bins
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 30)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 300)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(bins = 10)
# Alternativně můžeme použít také graf hustoty pravděpodobnosti
ggplot(penguins, aes(x = body_mass_g)) +
geom_density()
# Vztah mezi kategorickou a numerickou proměnnou můžeme znázornit pomocí
# krabicového grafu (boxplotu)
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot()
#zápis je zase stejný - ggplot, dataset, osy a plus geom_boxplot
ggplot(penguins, aes(y = species, x = body_mass_g)) +
geom_boxplot()
# Nebo můžeme použít graf hustoty pravděpodobnosti a barevně odlišit úrovně
# kategorické proměnné
ggplot(penguins, aes(x = body_mass_g, color = species)) +
geom_density(linewidth = 0.75)
# Funkce geom_density() umožňuje specifikovat jak barvu křivek, tak výplně
ggplot(penguins, aes(x = body_mass_g,
color = species,
fill = species)) +
geom_density()
#proto vhodné zvolit míru ne/průhlednosti
#stačí hodit alpha = ... do geom_density
ggplot(penguins, aes(x = body_mass_g,
color = species,
fill = species)) +
geom_density(alpha = .50)
#proto vhodné zvolit míru ne/průhlednosti
#stačí hodit alpha = ... do geom_density
ggplot(penguins, aes(x = body_mass_g,
color = species,
fill = species)) +
geom_density(alpha = .250)
#proto vhodné zvolit míru ne/průhlednosti
#stačí hodit alpha = ... do geom_density
ggplot(penguins, aes(x = body_mass_g,
color = species,
fill = species)) +
geom_density(alpha = .0250)
#proto vhodné zvolit míru ne/průhlednosti
#stačí hodit alpha = ... do geom_density
ggplot(penguins, aes(x = body_mass_g,
color = species,
fill = species)) +
geom_density(alpha = .250)
# Defaultně zobrazuje absolutní četnosti a sloupce jsou naskládány na sebe
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
(position = "fill")
# Když nastavíme v v rámci geom_bar() argument position na hodnotu "fill"
# zobrazí se nám relativní četnosti v rámci každé kategorie na ose X
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
# Když máme dvě numerické proměnné, můžeme jejich vztah znázornit pomocí
# bodového grafu (scatterplotu)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
# Defaultně zobrazuje absolutní četnosti a sloupce jsou naskládány na sebe
# zde je druh tučňáka dle ostrovů
# defaultně je graf stacked a jde o absolutní četnosti
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
# Když nastavíme v v rámci geom_bar() argument position na hodnotu "fill"
# zobrazí se nám relativní četnosti v rámci každé kategorie na ose X
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
# Když máme dvě numerické proměnné, můžeme jejich vztah znázornit pomocí
# bodového grafu (scatterplotu) --> geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
# Informace o dalších proměnných pak můžeme mapovat na další vlastnosti bodů
# např. barvu nebo tvar
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island),
size = 3)
# Informace o dalších proměnných pak můžeme mapovat na další vlastnosti bodů
# např. barvu nebo tvar
ggplot(penguins, aes(flipper_length_mm, body_mass_g)) +
geom_point(aes(color = species, shape = island),
size = 3)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 1)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 2)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 4)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 1)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 0)
# Namísto toho můžeme graf rozdělit na několik samostatných panelů podle úrovní
# některé z proměnných, a to pomocí funkce facet_wrap()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island, ncol = 1)
()
# * Uložení grafu ---------------------------------------------------
# Vytvořené grafy můžeme uložit na disk pomocí funkce ggsave()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
# Defaultně se uloží poslední vytvořený graf v aktuálních rozměrech
?ggsave
ggsave(filename = "plots/penguin-plot-1.png")
# Funkce ggsave() má různé argumenty, jimiž můžeme měnit např. rozměry nebo
# rozlišení grafu
ggsave(filename = "plots/penguin-plot-2.png",
units = "cm",
width = 10,
height = 10)
flights
flights
#stačí specifikovat relativní cestu
#defaultní velikost je daná oknem v R studio
#formát souboru volím v té cestě
#NECHCE specifikovat graf k uložení --> ukládá poslední zobrazený
#alternativně lze objekt někam uložit a pak specifikovat
p <- ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggsave(filename = "plots/penguin-plot-2.png",
plot = p)
ggsave(filename = "plots/penguin-plot-2.png",
plot = p)
# Funkce ggsave() má různé argumenty, jimiž můžeme měnit např. rozměry nebo
# rozlišení grafu
ggsave(filename = "plots/penguin-plot-2.png",
units = "cm",
width = 20,
height = 20)
ggsave(filename = "plots/penguin-plot-2.png",
plot = p)
# Funkce ggsave() má různé argumenty, jimiž můžeme měnit např. rozměry nebo
# rozlišení grafu
ggsave(filename = "plots/penguin-plot-3.png",
units = "cm",
width = 20,
height = 20)
flights
?flights
glimpse(flights)
library(nycflights13)
install.packages("nycflights13")
flights
?flights
??flights
nycflights13
?flights
glimpse(flights)
library(nycflights13)
flights
library(nycflights13)
flights
?flights
glimpse(flights)
glimpse(flights)
#za názvy jsou datové typy
summary(flights)
# Často chceme provést více operací zároveň.
# K jejich zřetězení se hodí pipe operátor %>%
# z mého chápání ten pipe umožní zřetězit operace
flights  %>%    #vyberu dataset
filter(dest == "IAH") %>%   #vyfiltruju dataset
group_by(year, month, day) %>%  #groupnu dle proměnných
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
# Funkce filter() slouží k výběru řádků, které chceme zachovat
flights %>%
filter(dep_delay > 120)
# Flights that departed on January 1
flights %>%
filter(month == 1 & day == 1)
flights %>%
filter(month == 1, day == 1)
# Flights that departed in January OR February
flights %>%
filter(month == 1 | month == 2)
# Flights that departed in January OR February
flights %>%
filter(month == 3 | month == 2)
# Flights that departed in January OR February
flights %>%
filter(month == 1 | month == 2)
# A shorter way to select flights that departed in January or February
flights %>%
filter(month %in% c(1, 2))
# A shorter way to select flights that departed in January or February
flights %>%
filter(month %in% c(2, 3))
#když chci rozmezí:
flights %>%
filter(between(month, 6, 8))
# Funkce dplyr NIKDY NEmodifikují PŮVODNÍ dataset
flights %>%
filter(month == 1 & day == 1)
# Funkce dplyr NIKDY NEmodifikují PŮVODNÍ dataset
flights %>%
filter(month == 3 & day == 1)
# Funkce dplyr NIKDY NEmodifikují PŮVODNÍ dataset
flights %>%
filter(month == 3 & day == 5)
flights
# Když chceme změny uložit, obvykle do nového objektu, musíme použít
# assignment operátor
jan1 <- flights %>%
filter(month == 1 & day == 1)
jan1
# Nejčastější chyby
flights %>%
filter(month = 1)
(month == 1 | 2)
# Funkce arrange slouží k seřazení řádků podle hodnot zvolených proměnných.
# Na rozdíl od funkce filter() nevyřazuje řádky.
flights %>%
arrange(year, month, day, dep_time)
# Funkce arrange slouží k seřazení řádků podle hodnot zvolených proměnných.
# Na rozdíl od funkce filter() nevyřazuje řádky.
flights %>%
arrange(year, month, day, dep_time)
# Pokud chceme sestupné řazení, můžeme použít pomocnou funkci desc()
flights %>%
arrange(desc(dep_delay))
1300/60
# Vymaž jakékoli duplicitní řádky
flights %>%
distinct()
# Vyber všechny jedinečné řádky pro sloupce origin a dest
flights %>%
distinct(origin, dest)
# Funkce count() pak slouží ke zjištění četností
flights %>%
count(origin, dest, sort = TRUE)
# Vyber všechny jedinečné řádky pro sloupce origin a dest
flights %>%
distinct(origin, dest) %>%
arrange(origin, dest)
# Funkce count() pak slouží ke zjištění četností kombinací
flights %>%
count(origin, dest, sort = TRUE)
# Funkce mutate() slouží k tvorbě nových sloupců
#zase první argumentem je dataset
#(skrze použití pipeoperátoru to nevypadá
#protože pipe operátor bere výsledek předchozí operace
#a dává jej jako první argumentem do navazující fce)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60)
)
# Argumentem .before nebo .after můžeme specifikovat, kde se nové sloupce
# mají vložit (defaultně budou až na konci)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.before = 1
)
# Argumentem .before nebo .after můžeme specifikovat, kde se nové sloupce
# mají vložit (defaultně budou až na konci)
#tyhle fce taky neupravují původní dataset --> pro uložení nový objekt
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.before = 1
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.after = day
)
# Pomocí argumentu .keep můžeme specifikovat,
# které z původních sloupců chceme zachovat
?mutate
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "none"
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "1"
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "used"
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "none"
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "used"
)
flights %>%
mutate(
air_delay = arr_delay - dep_delay,
speed = (distance*1.609344) / (air_time / 60),
.keep = "unused"
)
# Funkce select() slouží k výběru sloupců, které chceme zachovat
# Pomocí jména:
flights %>%
select(year, month, day)
# Všechny sloupce v rozmezí:
flights %>%
select(year:day)
# Všechny sloupce mimo rozmezí:
flights %>%
select(!year:day)
# Funkce select() slouží k výběru sloupců, které chceme zachovat
#opět z dplyr, nemodifikuje původní dataset
# Pomocí jména:
flights %>%
select(year, month, day)
# Funkce select() slouží k výběru sloupců, které chceme zachovat
#opět z dplyr, nemodifikuje původní dataset
# Pomocí jména:
flights %>%
select(year, month, day, dlay)
# Funkce select() slouží k výběru sloupců, které chceme zachovat
#opět z dplyr, nemodifikuje původní dataset
# Pomocí jména:
flights %>%
select(year, month, day, dep_delay)
# Všechny sloupce v rozmezí:
flights %>%
select(year:dep_delay)
# Všechny sloupce MIMO rozmezí:
flights %>%
select(!month:day)
# Výběr sloupců podle typu dat:
flights %>%
select(where(is.character))
# Výběr sloupců podle typu dat:
flights %>%
select(where(is.double))
flights %>%
select(where(is.numeric()))
select(where(is.numeric)
flights %>%
flights %>%
select(where(is.numeric))
flights %>%
select(where(is.double))
# Pomocné funkce starts_with(), ends_with() a contains()
flights %>%
select(starts_with("dep"))
# Pomocné funkce starts_with(), ends_with() a contains()
#je to pro názvy sloupců, ne obsah/řádky
flights %>%
select(starts_with("dep"))
flights %>%
select(ends_with("time"))
flights %>%
select(contains("arr"))
# Funkce select() můžeme sloužit i rovnou k přejmenování sloupce
flights %>%
select(tail_num = tailnum)
# Pomocné funkce starts_with(), ends_with() a contains()
#je to pro názvy sloupců, ne obsah/řádky
flights
# Funkce select() můžeme sloužit i rovnou k přejmenování sloupce
flights %>%
select(tail_num = tailnum)
# A konečně funkce relocate() slouží k přesunu sloupců
flights
# A konečně funkce relocate() slouží k přesunu sloupců
#ýběr sloupců podobně jako u selectu
#místo podobně z mutate
flights
# A konečně funkce relocate() slouží k přesunu sloupců
#ýběr sloupců podobně jako u selectu
#místo podobně z mutate
glimpse(flights)
flights %>%
relocate(distance:time_hour, .after = day)
flights  %>%
relocate(starts_with("arr"), .before = dep_time)
